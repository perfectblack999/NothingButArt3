{
  "name": "j-i-c",
  "version": "2.0.2",
  "description": "J I C is a Javascript Image Compressor using HTML5 Canvas & File API that allows you to compress your jpeg & png images before uploading to the server (100% client-side and no extra libraries required!)",
  "main": "src/JIC.js",
  "directories": {
    "example": "example"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/brunobar79/J-I-C.git"
  },
  "keywords": [
    "javascript",
    "image",
    "compressor",
    "js",
    "canvas",
    "html5"
  ],
  "author": {
    "name": "Bruno Barbieri"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/brunobar79/J-I-C/issues"
  },
  "homepage": "https://github.com/brunobar79/J-I-C#readme",
  "readme": "# J I C \n**J I C** is a Javascript Image Compressor using HTML5 Canvas & File API that allows you to compress your jpeg & png images before uploading to the server (100% client-side and no extra libraries requried!)\n\nCould you imagine how much bandwidth we can save if Google, Twitter and r Facebook implement this image compression before we upload those 5MB photos? This approach will make the internet faster!!\n\nYou can check the working demo here : http://makeitsolutions.com/labs/jic/\n\n## Requirements or Dependencies\n\n- NONE\n\n## Install via NPM\n\n```sh\nnpm install j-i-c\n```\n\n## Install via Bower\n\n```sh\nbower install JIC\n```\n\n\n## How it works\n\nTo compress the image, first it converts an image object to canvas and then compress it with the canvas method **toDataURL(mimetype, quality)**\n\nThen to upload the image object it uses the XMLHTTPRequest method sendAsBinary and sends the data url of the compressed image to the server and that's all!! Easy huh? \n\n\n## Example\n\n**J I C** has only 2 methods: compress & upload. Check it out:\n\n```javascript\n\n//========= Step 1 - Client Side Compression ===========\n\n//Images Objects\nvar source_img = document.getElementById(\"source_img\"),\n    target_img = document.getElementById(\"target_img\");\n\n//(NOTE: see the examples/js/demo.js file to understand how this object could be a local image \n//from your filesystem using the File API)\n\n//An Integer from 0 to 100\nvar quality =  80,\n// output file format (jpg || png)\noutput_format = 'jpg', \n//This function returns an Image Object \ntarget_img.src = jic.compress(source_img,quality,output_format).src;  \n\n\n//======= Step 2 - Upload compressed image to server =========\n\n//Here we set the params like endpoint, var name (server side) and filename\nvar server_endpoint = 'upload.php',\n\tserver_var_name = 'file',\n\tfilename = \"new.jpg\";\n\n//This is the callback that will be triggered once the upload is completed\nvar callback = function(response){ console.log(response); }\n\n//Here goes the magic\njic.upload(target_img, server_endpoint, server_var_name, filename, callback);\n\n//=======  Optional parameters example: errorCallback, duringCallback and customHeaders ======= \n// This function gets called on an error response of the server - status code of >= 400.\nvar errorCallback = function () {\n\t// Handle upload failure\n};\n\n// This function gets called while the file is uploading. Returns the percent completeness of the image being uploaded\nvar duringCallback = function (progressPercent) {\n\t//progressPercent can be used to show a progress bar\n};\n\n// Custom Request Headers, nifty for things like Basic Authorization\n\nvar customHeaders = { 'Authorization': 'Basic someBase64EncodedHash=====' };\n\njic.upload(target_img, server_endpoint, server_var_name, filename, successCallback, errorCallback, duringCallback, customHeaders);\n\n\n```\n\n\nCollaborators\n-------\n\n- [@JustinBeaudry](https://github.com/JustinBeaudry)  - Added MIT License\n\n- [@davidfq](https://github.com/davidfq) - Updated readme\n\n- [@alastairparagas](https://github.com/alastairparagas) - Added errorCallback, progressCallback and customHeaders parameters\n \n\nLicense\n-------\n\nThis code is released under the [MIT License\nlicense](http://opensource.org/licenses/MIT)\n\nCopyright (c) 2012 Bruno Barbieri\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\nEnjoy!\n",
  "readmeFilename": "README.md",
  "_id": "j-i-c@2.0.2",
  "_shasum": "7279156db7c908ed5cdc2a8bf543d3246993c32e",
  "_from": "j-i-c@",
  "_resolved": "https://registry.npmjs.org/j-i-c/-/j-i-c-2.0.2.tgz"
}
